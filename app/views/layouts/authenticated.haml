%html
  %head
    %title PhotoROUTE
    = stylesheet_link_tag 'application'
    -# Helper doesn't like qs params
    %script{'type' => 'text/javascript', 'src' => 'http://maps.google.com/maps/api/js?sensor=false'}
    %script{'type' => 'text/javascript'}
      window.coords = [];
      - if @path
        - @path.path_waypoints.each do |pp|
          - latlng = pp.waypoint.latlng.split(',')
          = "window.coords.push(new google.maps.LatLng(#{latlng[0]},#{latlng[1]}));"
    :javascript
      function initialize() {
        var myOptions = {
          zoom: 11,
          center: window.coords[0],
          mapTypeId: google.maps.MapTypeId.ROADMAP
        };

        var map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);

        for (i=0;i<=window.coords.length-1;i++) {
          marker = new google.maps.Marker({position: window.coords[i], map: map, title:"marker"});
        };

        var flightPath = new google.maps.Polyline({
          path: window.coords,
          strokeColor: "#FF0000",
          strokeOpacity: 1.0,
          strokeWeight: 3
        });
        flightPath.setMap(map);
      }
    %body{'onload' => 'initialize()'}
      #header
        .page
          .grid_3
            %p#brand= link_to "PhotoROUTE", "/welcome"
          .grid_9
            %span= "Welcome: #{User.find(session[:user_id]).name} | " if session[:user_id]
            %span= link_to("Logout", logout_path) + " | " if session[:user_id]
            %span= link_to("FAQ", page_path(:FAQ))
      #navmenu
        .page
          %span= link_to("Import", :controller => "import", :action => :show) + " | "
          %span= link_to("Paths", paths_path) + " | "
          %span= link_to("Points", points_path) 
      #content
        #content-primary
          #main
            - if flash.count > 0
              #messages
                - for name in [:notice, :warning, :message, :error, :alert] 
                  - if flash[name]
                    %div{'class' => 'message #{name}'}= flash[name]          
            = yield :layout